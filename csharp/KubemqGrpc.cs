// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kubemq.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace KubeMQ.Grpc {
  public static partial class kubemq
  {
    static readonly string __ServiceName = "kubemq.kubemq";

    static readonly grpc::Marshaller<global::KubeMQ.Grpc.Event> __Marshaller_Event = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.Event.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::KubeMQ.Grpc.Result> __Marshaller_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::KubeMQ.Grpc.Subscribe> __Marshaller_Subscribe = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.Subscribe.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::KubeMQ.Grpc.EventReceive> __Marshaller_EventReceive = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.EventReceive.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::KubeMQ.Grpc.Request> __Marshaller_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::KubeMQ.Grpc.Response> __Marshaller_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::KubeMQ.Grpc.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::KubeMQ.Grpc.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::KubeMQ.Grpc.Event, global::KubeMQ.Grpc.Result> __Method_SendEvent = new grpc::Method<global::KubeMQ.Grpc.Event, global::KubeMQ.Grpc.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendEvent",
        __Marshaller_Event,
        __Marshaller_Result);

    static readonly grpc::Method<global::KubeMQ.Grpc.Event, global::KubeMQ.Grpc.Result> __Method_SendEventsStream = new grpc::Method<global::KubeMQ.Grpc.Event, global::KubeMQ.Grpc.Result>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SendEventsStream",
        __Marshaller_Event,
        __Marshaller_Result);

    static readonly grpc::Method<global::KubeMQ.Grpc.Subscribe, global::KubeMQ.Grpc.EventReceive> __Method_SubscribeToEvents = new grpc::Method<global::KubeMQ.Grpc.Subscribe, global::KubeMQ.Grpc.EventReceive>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeToEvents",
        __Marshaller_Subscribe,
        __Marshaller_EventReceive);

    static readonly grpc::Method<global::KubeMQ.Grpc.Subscribe, global::KubeMQ.Grpc.Request> __Method_SubscribeToRequests = new grpc::Method<global::KubeMQ.Grpc.Subscribe, global::KubeMQ.Grpc.Request>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeToRequests",
        __Marshaller_Subscribe,
        __Marshaller_Request);

    static readonly grpc::Method<global::KubeMQ.Grpc.Request, global::KubeMQ.Grpc.Response> __Method_SendRequest = new grpc::Method<global::KubeMQ.Grpc.Request, global::KubeMQ.Grpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendRequest",
        __Marshaller_Request,
        __Marshaller_Response);

    static readonly grpc::Method<global::KubeMQ.Grpc.Response, global::KubeMQ.Grpc.Empty> __Method_SendResponse = new grpc::Method<global::KubeMQ.Grpc.Response, global::KubeMQ.Grpc.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendResponse",
        __Marshaller_Response,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::KubeMQ.Grpc.KubemqReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of kubemq</summary>
    public abstract partial class kubemqBase
    {
      public virtual global::System.Threading.Tasks.Task<global::KubeMQ.Grpc.Result> SendEvent(global::KubeMQ.Grpc.Event request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SendEventsStream(grpc::IAsyncStreamReader<global::KubeMQ.Grpc.Event> requestStream, grpc::IServerStreamWriter<global::KubeMQ.Grpc.Result> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeToEvents(global::KubeMQ.Grpc.Subscribe request, grpc::IServerStreamWriter<global::KubeMQ.Grpc.EventReceive> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeToRequests(global::KubeMQ.Grpc.Subscribe request, grpc::IServerStreamWriter<global::KubeMQ.Grpc.Request> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::KubeMQ.Grpc.Response> SendRequest(global::KubeMQ.Grpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::KubeMQ.Grpc.Empty> SendResponse(global::KubeMQ.Grpc.Response request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for kubemq</summary>
    public partial class kubemqClient : grpc::ClientBase<kubemqClient>
    {
      /// <summary>Creates a new client for kubemq</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public kubemqClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for kubemq that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public kubemqClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected kubemqClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected kubemqClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::KubeMQ.Grpc.Result SendEvent(global::KubeMQ.Grpc.Event request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::KubeMQ.Grpc.Result SendEvent(global::KubeMQ.Grpc.Event request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::KubeMQ.Grpc.Result> SendEventAsync(global::KubeMQ.Grpc.Event request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::KubeMQ.Grpc.Result> SendEventAsync(global::KubeMQ.Grpc.Event request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendEvent, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::KubeMQ.Grpc.Event, global::KubeMQ.Grpc.Result> SendEventsStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendEventsStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::KubeMQ.Grpc.Event, global::KubeMQ.Grpc.Result> SendEventsStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SendEventsStream, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::KubeMQ.Grpc.EventReceive> SubscribeToEvents(global::KubeMQ.Grpc.Subscribe request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubscribeToEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::KubeMQ.Grpc.EventReceive> SubscribeToEvents(global::KubeMQ.Grpc.Subscribe request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeToEvents, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::KubeMQ.Grpc.Request> SubscribeToRequests(global::KubeMQ.Grpc.Subscribe request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubscribeToRequests(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::KubeMQ.Grpc.Request> SubscribeToRequests(global::KubeMQ.Grpc.Subscribe request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeToRequests, null, options, request);
      }
      public virtual global::KubeMQ.Grpc.Response SendRequest(global::KubeMQ.Grpc.Request request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::KubeMQ.Grpc.Response SendRequest(global::KubeMQ.Grpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendRequest, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::KubeMQ.Grpc.Response> SendRequestAsync(global::KubeMQ.Grpc.Request request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::KubeMQ.Grpc.Response> SendRequestAsync(global::KubeMQ.Grpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendRequest, null, options, request);
      }
      public virtual global::KubeMQ.Grpc.Empty SendResponse(global::KubeMQ.Grpc.Response request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendResponse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::KubeMQ.Grpc.Empty SendResponse(global::KubeMQ.Grpc.Response request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendResponse, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::KubeMQ.Grpc.Empty> SendResponseAsync(global::KubeMQ.Grpc.Response request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendResponseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::KubeMQ.Grpc.Empty> SendResponseAsync(global::KubeMQ.Grpc.Response request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendResponse, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override kubemqClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new kubemqClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(kubemqBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendEvent, serviceImpl.SendEvent)
          .AddMethod(__Method_SendEventsStream, serviceImpl.SendEventsStream)
          .AddMethod(__Method_SubscribeToEvents, serviceImpl.SubscribeToEvents)
          .AddMethod(__Method_SubscribeToRequests, serviceImpl.SubscribeToRequests)
          .AddMethod(__Method_SendRequest, serviceImpl.SendRequest)
          .AddMethod(__Method_SendResponse, serviceImpl.SendResponse).Build();
    }

  }
}
#endregion
